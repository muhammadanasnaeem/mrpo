<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer verticalCenter="0"
				   horizontalCenter="0"
				   x="0" 
				   y="0"
				   xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   width="100%"
				   height="100%"
				   minHeight="186"
				   xmlns:flexlib="http://code.google.com/p/flexlib/"
				   initialize="group1_initializeHandler(event)"
				   xmlns:components="components.*"
				   creationComplete="group1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import flash.ui.ContextMenu;
			
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.ScrollEvent;
			import mx.resources.IResourceManager;
			import mx.resources.ResourceManager;
			
			import spark.components.Button;
			include "../eventhandlers/MarketWatch.as"

			[Bindable]
			[Embed(source="../images/equitiesover.jpg")]
			private var equitiesOverImage:Class;

			[Bindable]
			[Embed(source="../images/equitiesup.jpg")]
			private var equitiesUpImage:Class;

			[Bindable]
			[Embed(source="../images/bondsover.jpg")]
			private var bondsOverImage:Class;

			[Bindable]
			[Embed(source="../images/bondsup.jpg")]
			private var bondsUpImage:Class;
			
			[Bindable]
			[Embed(source="../images/backImage.png")]
			private var backImage:Class;
			
			[Bindable]
			[Embed(source="../images/derivativesup.jpg")]
			private var derivativesUp:Class;

			
			[Bindable]
			[Embed(source="../images/futuresup.jpg")]
			private var futuresUp:Class;
			
			[Bindable]
			[Embed(source="../images/optionsup.jpg")]
			private var optionsUp:Class;
			

			
			/////////////ARABIC Images for Market Watch
			[Bindable]
			[Embed(source="../images/bonds1 (1).jpg")]
			private var AR_bondsOverImage:Class;
			
			[Bindable]
			[Embed(source="../images/bonds1 (2).jpg")]
			private var AR_bondsUpImage:Class;
			
			[Bindable]
			[Embed(source="../images/equties1 (2).jpg")]
			private var AR_equtiesUpImage:Class;
			
			[Bindable]
			[Embed(source="../images/equties1 (3).jpg")]
			private var AR_equtiesOverImage:Class;
			
			
			[Bindable]
			[Embed(source="../images/derivatives1 (3).jpg")]
			private var AR_derivativesUpImage:Class;
			
			
			[Bindable]
			[Embed(source="../images/futures1 (2).jpg")]
			private var AR_futuresUpImage:Class;
			
			[Bindable]
			[Embed(source="../images/options1 (2).jpg")]
			private var AR_optionsUpImage:Class;
			
			private var resourceManagerr:IResourceManager = ResourceManager.getInstance();
			
			protected function hgroupBackground():void
			{
				marketWatchHGroup.setStyle("backgroundColor", 0xb7b7b7);
			}

			protected function adgMarketWatch_scrollHandler(event:ScrollEvent):void
			{
				adgMarketWatch.invalidateList();
			}

			protected function adgMarketWatch_headerReleaseHandler(event:DataGridEvent):void
			{
//				if(sortColumn != "" && sortColumn == event.dataField)
//					sortDescending = !sortDescending;
//				else
//					sortDescending = false;
				if (sortColumn == event.dataField)
				{
					sortDescending=!(event.currentTarget.columns[event.columnIndex] as DataGridColumn).sortDescending
				}
				else
				{
					sortDescending=(event.currentTarget.columns[event.columnIndex] as DataGridColumn).sortDescending
				}
				//var sortFlag:Boolean = 
				sortColumn=event.dataField;
				event.currentTarget.selectedItem=null;
			}
			
			protected function adgMarketWatch_itemEditBeginHandler(event:DataGridEvent):void
			{
				//modelManager.marketWatchModel.marketWatch[selectedIndex].disableAutoUpdate();
				//(event.currentTarget as DataGrid).dataProvider = false;
				// TODO Auto-generated method stub
			}

			protected function equitiesMouseOverHandler(event:MouseEvent):void
			{
				if(FlexGlobals.topLevelApplication.parameters.LOCALE == 'en_US')
				{
					equities.source=equitiesOverImage;
				}
				else
				{
					equities.source=AR_equtiesOverImage;
				}
			}

			protected function equitiesmouseOutHandler(event:MouseEvent):void
			{
				if(FlexGlobals.topLevelApplication.parameters.LOCALE == 'en_US')
				{
					equities.source=equitiesUpImage;
				}
				else
				{
					equities.source=AR_equtiesUpImage;
				}
			}

			protected function bondsmouseOverHandler(event:MouseEvent):void
			{
				if(FlexGlobals.topLevelApplication.parameters.LOCALE == 'en_US')
				{
					bonds.source=bondsOverImage;
				}
				else
				{
					bonds.source=AR_bondsOverImage;
				}
			}

			protected function bondsmouseOutHandler(event:MouseEvent):void
			{
				if(FlexGlobals.topLevelApplication.parameters.LOCALE == 'en_US')
				{
					bonds.source=bondsUpImage;
				}
				else
				{
					bonds.source=AR_bondsUpImage;
				}
			}

			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				this.setStyle("backgroundColor", 0xdbdbdb)
//				this.setStyle("verticalScrollPolicy", "off")
			}
			
			
			protected function equities_creationCompleteHandler(event:FlexEvent):void
			{
				windowManager.viewManager.marketWatch.toolbar_clickHandler(new MouseEvent(MouseEvent.CLICK,true,false));
			}
			
			protected function pageNav_creationCompleteHandler(event:FlexEvent):void
			{
				pageNav.addEventListener(ItemClickEvent.ITEM_CLICK,changeToggle);
				setTimeout(launchAlert1,1500);
			}
			
			
			private function launchAlert1():void
			{
				var curItem:Object = windowManager.viewManager.marketWatch.pageNav.getChildAt(0);
				curItem.setStyle("color", 0xfb6605);
			}
			protected function changeToggle(event:ItemClickEvent,flag:Boolean=false):void
			{
					 for(var i:int=0; i<event.target.numChildren; i++)
					 {   
						var curItem:Object = event.target.getChildAt(i);  //d66316 0xff2020 fb6605
						i==event.index ? curItem.setStyle("color", 0xfb6605) : curItem.setStyle("color", 0x000000);              
					 }  
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:DateFormatter id="dateFormatter"
						  formatString="DD/MM/YYYY"/>
		<components:EZCurrencyFormatter id="moneyFormatter"/>
		<components:EZNumberFormatter id="numberFormatter"/>
		<components:EZNumberFormatter id="numberFormatterWithPercentSign"
									  usePercentSign="true"/>
	</fx:Declarations>

	<mx:VBox verticalGap="0"
			 minHeight="186"  
			 height="100%"
			 width="100%">
<mx:HBox x="0" y="7" width="20%" horizontalGap="0" id="paginationHBox" visible="true">
		<mx:LinkBar id="pageNav" dataProvider="{nav}"   visible="true" separatorColor="#dbdbdb" separatorWidth="0"
					itemClick="navigatePage(event)"   fontSize="12" 
					 creationComplete="pageNav_creationCompleteHandler(event)"
					horizontalGap="1" 
					width="100%"/>
		<mx:Label id="viewingAlertsLabel1" text=""/>
		<mx:Label id="viewingAlertsLabel2" text=""/>
</mx:HBox> <!--dataProvider="{bindedArray}"-->
		<mx:DataGrid id="adgMarketWatch" x="0" top="30" bottom="22" width="100%" minHeight="186"
					 contextMenu="{ctMenu}" height="100%"   
					 creationComplete="adgMarketWatch_creationCompleteHandler(event)"
					 doubleClick="adgMarketWatch_doubleClickHandler(event)" editable="true"
					 headerRelease="adgMarketWatch_headerReleaseHandler(event)"
					 horizontalScrollPolicy="auto"   dataProvider="{bindedArray}"
					 itemClick="adgMarketWatch_itemClickHandler(event)"
					 itemEditBegin="adgMarketWatch_itemEditBeginHandler(event)"
					 itemEditEnd="adgMarketWatch_FocusOutHandler(event)"
					 itemRollOver="lastRollOverIndex = event.rowIndex"
					 rowCount="{Constants.ROW_COUNT_MARKET_WATCH}" rowHeight="18"
					 scroll="adgMarketWatch_scrollHandler(event)" sortableColumns="false"
					 variableRowHeight="true">
			<mx:columns>
				<mx:DataGridColumn width="65"
								   id="colSymbolID"
								   headerText=""
								   dataField="sid"
								   editable="false"
								   draggable="false"
								   visible="false"/>
				<mx:DataGridColumn width="65" 
								   id="colExchange"
								   sortCompareFunction="{stringSortCompare}"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispExchangeCol}"
								   headerText="{resourceManagerr.getString('marketwatch','exchange')}"
								   dataField="EXCHANGE"
								   editable="false"
								   draggable="false"
								   itemRenderer="renderer.DropDownCellRenderer"/>
				<mx:DataGridColumn width="65"
								   id="colMarket"
								   sortCompareFunction="{stringSortCompare}"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispMarktetCol}"
								   headerText="{resourceManagerr.getString('marketwatch','market')}"
								   dataField="MARKET"
								   editable="false"
								   draggable="false"
								   itemRenderer="renderer.DropDownCellRenderer"/>
				<mx:DataGridColumn width="120"
								   id="colSymbol"
								   sortCompareFunction="{stringSortCompare}"
								   headerText="{resourceManagerr.getString('marketwatch','symbol')}"
								   dataField="SYMBOL"
								   editable="true"
								   draggable="false"
								   color="#53f257"/>

				<!-- Begin Bond Columns -->
				<!-- mx:DataGridColumn width="50" id="colIssueName" headerText="Issue Name" dataField="ISSUE_NAME" editable="false" backgroundColor="#D3D3DA" /-->
				<mx:DataGridColumn width="50"
								   id="colIRR"
								   headerText="{resourceManagerr.getString('marketwatch','irr')}"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispIRRCol &amp;&amp; selectedIndex==1}"
								   dataField="IRR"
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.numberFormatter.format(data.IRR)}"
									  width="100%"
									  textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="50"
								   id="colAIRR"
								   headerText="{resourceManagerr.getString('marketwatch','airr')}"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispAIRRCol &amp;&amp; selectedIndex==1}"
								   dataField="AIRR"
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.numberFormatter.format(data.AIRR)}"
									  width="100%"
									  textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="50"
								   id="colBaseRate"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispBaseRateCol &amp;&amp; selectedIndex==1 }"
								   headerText="{resourceManagerr.getString('marketwatch','baserate')}"
								   dataField="BASE_RATE"
								   editable="false"
								   sortable="false"
								   textAlign="right"/>

				<mx:DataGridColumn width="50"
								   id="colSpreadRate"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispSpreadRateCol &amp;&amp; selectedIndex==1}"
								   headerText="{resourceManagerr.getString('marketwatch','spreadrate')}"
								   dataField="SPREAD_RATE"
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.numberFormatter.format(data.SPREAD_RATE)}"
									  width="100%"
									  textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="50"
								   id="colCouponRate"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispCouponRateCol &amp;&amp; selectedIndex==1}"
								   headerText="{resourceManagerr.getString('marketwatch','couponrate')}"
								   dataField="COUPON_RATE"
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.numberFormatter.format(data.COUPON_RATE)}"
									  width="100%"
									  textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="70"
								   id="colNextCoupon"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispNextCouponCol &amp;&amp; selectedIndex==1}"
								   headerText="{resourceManagerr.getString('marketwatch','nextcoupondate')}"
								   dataField="NEXT_COUPON"
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.dateFormatter.format(data.NEXT_COUPON)}"
									  textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="70"
								   id="colMaturityDate"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispMaturityDateCol &amp;&amp; selectedIndex==1}"
								   headerText="{resourceManagerr.getString('marketwatch','maturityDate')}"
								   dataField="MATURITY_DATE"
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.dateFormatter.format(data.MATURITY_DATE)}"
									  textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<!--mx:DataGridColumn width="50" id="colFloor" headerText="Floor" dataField="FLOOR" editable="false" sortable="false" >
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.numberFormatter.format(data.FLOOR)}" width="100%" textAlign="right" />
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>

				<mx:DataGridColumn width="50" id="colCap" headerText="Cap" dataField="CAP" editable="false" sortable="false" >
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.numberFormatter.format(data.CAP)}" width="100%" textAlign="right" />
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>

				<mx:DataGridColumn width="50" id="colMTM" headerText="MTM" dataField="MTM" editable="false" sortable="false" >
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.numberFormatter.format(data.MTM)}" width="100%" textAlign="right" />
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn-->
				<!-- End Bond Columns-->
				<!--mx:DataGridColumn width="50" id="colState" headerText="State" dataField="STATE" editable="false" sortable="false" /-->
				<mx:DataGridColumn width="50"
								   id="colFlags"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispFlagsCol}"
								   headerText="{resourceManagerr.getString('marketwatch','flags')}"
								   dataField="FLAGS"
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{data.FLAGS}"
									  width="100%"
									  textAlign="right"
									 />
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="50"
								   id="colBuyVolume"
								   backgroundColor="#000000"
								   color="#3ebefd"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispBidVolumeCol}"
								   headerText="{resourceManagerr.getString('marketwatch','bidsize')}"
								   dataField="BUY_VOLUME"
								   editable="false"
								   sortable="false"
								   itemRenderer="renderer.BuyVolumeCellRenderer"
								   textAlign="right">
				</mx:DataGridColumn>
				<mx:DataGridColumn width="50"
								   id="colBuy"
								   backgroundColor="#000000"
								   color="#3ebefd"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispBidCol}"
								   headerText="{resourceManagerr.getString('marketwatch','bid')}"
								   dataField="BUY"
								   editable="false"
								   sortable="false"
								   itemRenderer="renderer.BuyCellRenderer"
								   textAlign="right"/>
				<mx:DataGridColumn width="50"
								   id="colBuyYield"
								   backgroundColor="#1e1e1e"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispBuyYield &amp;&amp; selectedIndex==1 }"
								   headerText="{resourceManagerr.getString('marketwatch','yield')}"
								   dataField="BUY"
								   editable="false"
								   sortable="false"
								   textAlign="right">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.calculateCurrentYield(data.BUY,new Number(data.COUPON_RATE) ) > 0 ? outerDocument.calculateCurrentYield(data.BUY,new Number(data.COUPON_RATE) ) : '' }"
									  width="100%"
									  textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="50"
								   id="colSell"
								   backgroundColor="#000000"
								   headerText="{resourceManagerr.getString('marketwatch','ask')}"
								   color="#fe5898"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispOfferCol}"
								   dataField="SELL"
								   editable="false"
								   sortable="false"
								   itemRenderer="renderer.SellCellRenderer"
								   textAlign="right"/>
				<mx:DataGridColumn width="50"
								   id="colSellYield"
								   backgroundColor="#1e1e1e"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispSellYield &amp;&amp; selectedIndex==1 }"
								   headerText="{resourceManagerr.getString('marketwatch','yield')}"
								   dataField="SELL"
								   editable="false"
								   sortable="false"
								   textAlign="right">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.calculateCurrentYield(data.SELL,new Number(data.COUPON_RATE) ) > 0 ? outerDocument.calculateCurrentYield(data.SELL,new Number(data.COUPON_RATE) ) : '' }"
									  width="100%"
									  textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="50"
								   id="colSellVolume"
								   backgroundColor="#000000"
								   color="#fe5898"
								   headerText="{resourceManagerr.getString('marketwatch','askSize')}"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispOfferVolumeCol}"
								   dataField="SELL_VOLUME"
								   editable="false"
								   sortable="false"
								   itemRenderer="renderer.SellVolumeCellRenderer"
								   textAlign="right"/>

				<mx:DataGridColumn width="50"
								   id="colLast"
								   headerText="{resourceManagerr.getString('marketwatch','last')}"
								   dataField="LAST"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispLastCol}"
								   editable="false"
								   sortable="false"
								   itemRenderer="renderer.LastPriceCellRenderer"
								   textAlign="right"/>

				<mx:DataGridColumn width="50"
								   id="colLastVolume"
								   headerText="{resourceManagerr.getString('marketwatch','lastVolume')}"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispLastVolumeCol}"
								   dataField="LAST_VOLUME"
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.numberFormatter.format(data.LAST_VOLUME)}"
									  width="100%"
									  textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="50"
								   id="colTurnOver"
								   headerText="{resourceManagerr.getString('marketwatch','turnover')}"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispTurnOverCol}"
								   dataField="TURN_OVER"
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.numberFormatter.format(data.TURN_OVER)}"
									  width="100%"
									  textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="50"
								   id="colTrades"
								   headerText="{resourceManagerr.getString('marketwatch','trades')}"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispTradesCol}"
								   dataField="TRADES"
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.numberFormatter.format(data.TRADES)}"
									  width="100%"
									  textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="50"
								   id="colOpen"
								   headerText="{resourceManagerr.getString('marketwatch','open')}"
								   visible="false"
								   dataField="OPEN"
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.moneyFormatter.format(data.OPEN)}"
									  width="100%"
									  textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="50"
								   id="colAverage"
								   headerText="{resourceManagerr.getString('marketwatch','average')}"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispAverageCol}"
								   dataField="AVERAGE"
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.moneyFormatter.format(data.AVERAGE)}"
									  width="100%"
									  textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="50"
								   id="colHigh"
								   headerText="{resourceManagerr.getString('marketwatch','high')}"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispHighCol}"
								   dataField="HIGH"
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.moneyFormatter.format(data.HIGH)}"
									  width="100%"
									  textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="50"
								   id="colLow"
								   headerText="{resourceManagerr.getString('marketwatch','low')}"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispLowCol}"
								   dataField="LOW"
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.moneyFormatter.format(data.LOW)}"
									  width="100%"
									  textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="50"
								   id="colChange"
								   headerText="{resourceManagerr.getString('marketwatch','change')}"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispChangeCol}"
								   dataField="CHANGE"
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.moneyFormatter.format(data.CHANGE)}"
									  color="{(data.CHANGE > 0) ? 0x52f156: 0xff1411}"
									  width="100%"
									  textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="50"
								   id="colDaysToMaturity"
								   headerText="{resourceManagerr.getString('marketwatch','open')}"
								   dataField="DAYS_TO_MATURITY"
								   visible="{modelManager.marketWatchModel.marketWatchCols.dispDaysToMaturityCol &amp;&amp; selectedIndex==1}"
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.numberFormatter.format(data.DAYS_TO_MATURITY)}"
									  width="100%"
									  textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn width="50"
								   id="colPercentChange"
								   headerText="{'%'+resourceManagerr.getString('marketwatch','change')}"
								   visible="false"
								   dataField="PERCENT_CHANGE"
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.moneyFormatter.format((data.CHANGE/100)*100)}"
									  color="{((data.CHANGE/100)*100 > 0) ? 0x52f156: 0xff1411}"
									  width="100%"
									  textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
		
	<!--<mx:VBox width="100%" top="{this.height-paginationHBox.height-1}" verticalGap="0">-->
		<s:BorderContainer width="100%" 
						   height="3"
						   borderColor="#fb6506"
						   borderWeight="2"/>
		<mx:HBox id="marketWatchHGroup" x="0" y="619" width="401" horizontalGap="0" >
			<s:Image source="{(FlexGlobals.topLevelApplication.parameters.LOCALE == 'en_US')?equitiesUpImage:AR_equtiesUpImage}"
					 useHandCursor="true" 
					 buttonMode="true"  
					 id="equities"  creationComplete="equities_creationCompleteHandler(event)"
					 click="toolbar_clickHandler(event)"
					/>  
			<s:Image source="{(FlexGlobals.topLevelApplication.parameters.LOCALE == 'en_US')?bondsUp:AR_bondsUpImage}"
					 id="bonds" 
					 useHandCursor="true"
					 buttonMode="true"
					 click="toolbar_clickHandler(event)"
					 />
			<s:Image source="{(FlexGlobals.topLevelApplication.parameters.LOCALE == 'en_US')?derivativesUp:AR_derivativesUpImage}"
					 id="derivatives" 
					 useHandCursor="true" 
					 buttonMode="true"
					 click="toolbar_clickHandler(event)"
					 enabled="false"/>
			<s:Image source="{(FlexGlobals.topLevelApplication.parameters.LOCALE == 'en_US')?futuresUp:AR_futuresUpImage}"
					 id="futures"
					 useHandCursor="true" 
					 buttonMode="true"
					 click="toolbar_clickHandler(event)"
					 enabled="false"/>
			<s:Image source="{(FlexGlobals.topLevelApplication.parameters.LOCALE == 'en_US')?optionsUp:AR_optionsUpImage}"
					 id="options"
					 useHandCursor="true"
					 buttonMode="true" 
					 click="toolbar_clickHandler(event)"
					 enabled="false"/>
		</mx:HBox>
	</mx:VBox>
</s:BorderContainer>
<!-- //CHANGE {modelManager.marketWatchModel.marketWatchCols.dispPercChangeCol}  //OPEN {modelManager.marketWatchModel.marketWatchCols.dispOpenCol}-->