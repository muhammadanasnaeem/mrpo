<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 xmlns:net="flash.net.*"
		 initialize="group1_initializeHandler(event)" xmlns:components="components.*">
	<fx:Script>
		<![CDATA[
			include "../components/SelectionMenu.as"
			include "../eventhandlers/RemainingOrders.as"
			
			
			import com.as3xls.xls.Cell;
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			import com.as3xls.xls.Type;
			
			import flash.net.FileReference;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.IndexChangeEvent;
			[Bindable]  
			private var fields:Array = new Array();
			
			[Bindable]
			[Embed(source="images/xls.png")]
			public var ImgXls:Class;
			
			protected function btnExport_clickHandler(event:MouseEvent):void
			{
//				sheet = new Shee();				
//				var dataProviderCollection:ArrayCollection = adgRemainingOrders.dataProvider;  
//				var rowCount:int = dataProviderCollection.length;  
//				sheet.resize(rowCount + 1,adgRemainingOrders.columnCount);  
//				var columns:Array = adgRemainingOrders.columns;  
//				var i:int = 0;  
//				for each (var field:DataGridColumn in columns){  
//					fields.push(field.dataField.toString());  
//					sheet.setCell(0,i,field.dataField.toString());  
//					i++;  
//				}  
//				
//				for(var r:int=0; r < rowCount; r++)  
//				{  
//					var record:Object = dataProviderCollection.getItemAt(r);  
//					/*insert record starting from row no 2 else  
//					headers will be overwritten*/  
//					insertRecordInSheet(r+1,sheet,record);  
//				}  
//				var xls:ExcelFile = new ExcelFile();  
//				xls.sheets.addItem(sheet);  
//				
//				var bytes: ByteArray = xls.saveToByteArray();				
//				fr.save(bytes,"RemainingOrders.xls");				 
			}
			private function fileIOError_Handler(event:IOErrorEvent):void
			{
				Alert.show(Messages.FILE_IO_ERROR, Messages.TITLE_ERROR);
			}
			
			private function fileSaved_Handler(event:Event):void
			{
				Alert.show(Messages.FILE_SAVED_SUCCESS);
			}
			private function insertRecordInSheet(row:int,sheet:Sheet,record:Object):void  
			{  
				var colCount:int = adgRemainingOrders.columnCount;  
				for(var c:int; c < colCount; c++)  
				{  
					var i:int = 0;  
					for each(var field:String in fields){  
						//Alert.show(record[field]);
						if(record[field] is Date)
						{
							sheet.setCell(row,i,record[field]);
							var cell:Cell = sheet.getCell(row,i);
							cell.format = "D-MMM-YY";
							cell.dateMode = 1;
							//cell.
						}
						else
							sheet.setCell(row,i,record[field]);
						i++;  
					}  
				}  
			}


			protected function traders_changeHandler(event:IndexChangeEvent):void
			{
				ModelManager.getInstance().updateRemainingOrders();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:DateFormatter id="dateFormatter" formatString="LL:NN:SS A" />
		<components:EZCurrencyFormatter id="moneyFormatter" />
		<components:EZNumberFormatter id="numberFormatter" />
		<net:FileReference id="fileReference" />
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<!-- mx:ButtonBar id="toolbar" name="toolbar" y="2" horizontalCenter="0">
	<mx:dataProvider>
	<fx:String>Expand All</fx:String>
	<fx:String>Refresh</fx:String>
	</mx:dataProvider>
	</mx:ButtonBar -->
	<s:BorderContainer width="100%" height="30" horizontalCenter="0" top="0">
		<s:Label text="Exchange:" horizontalCenter="-265" top="7"/>
		<components:EZDropDownTextInput width="49" height="20" id="txtExchange" editable="false" click="txtExchange_clickHandler(event)" horizontalCenter="-210" top="2"/>
		<s:Label text="Market:" horizontalCenter="-160" top="7"/>
		<components:EZDropDownTextInput width="49" height="20" id="txtMarket" editable="false" click="txtMarket_clickHandler(event)" horizontalCenter="-114" top="2"/>
		<s:Label text="Symbol:" horizontalCenter="-67" top="7"/>
		<s:TextInput width="110" height="20" id="txtSymbol" keyDown="txtSymbol_keyDownHandler(event)" horizontalCenter="19" top="2"/>
	</s:BorderContainer>
	<components:EZDataGrid
		id="adgRemainingOrders"
		right="1" left="1" bottom="1" top="30"
		width="100%" height="100%"
		click="adgRemainingOrders_itemClickHandler(event)"
		dataProvider="{modelManager.remainingOrdersModel.remainingOrders}" >
		<components:columns>
			<!--mx:AdvancedDataGridColumn headerText="Market" dataField="MARKET" /-->
			<mx:DataGridColumn headerText="Symbol" dataField="SYMBOL" />

			<mx:DataGridColumn headerText="Client" dataField="CLIENT_CODE" />

			<mx:DataGridColumn headerText="Order Number" dataField="ORDER_NO" >
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{outerDocument.numberFormatter.format(data.ORDER_NO)}" width="100%" textAlign="right" />
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>

			<mx:DataGridColumn headerText="Bid/Offer" dataField="SIDE"  />

			<mx:DataGridColumn headerText="Price" dataField="PRICE" >
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{outerDocument.moneyFormatter.format(data.PRICE)}" width="100%" textAlign="right" />
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>

			<mx:DataGridColumn headerText="Remaining" dataField="VOLUME" >
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{outerDocument.numberFormatter.format(data.VOLUME)}" width="100%" textAlign="right" />
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			
			<mx:DataGridColumn headerText="Disc. Volume" dataField="DISCLOSED_VOLUME" >
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{outerDocument.numberFormatter.format(data.DISCLOSED_VOLUME) == '0' ? '' : outerDocument.numberFormatter.format(data.DISCLOSED_VOLUME)}" width="100%" textAlign="right" />
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			
			<mx:DataGridColumn headerText="Time" dataField="ENTRY_DATETIME"  >
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{outerDocument.dateFormatter.format(data.ENTRY_DATETIME)}" />
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>

			<mx:DataGridColumn headerText="Trigger Price" dataField="TRIGGER_PRICE" >
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{outerDocument.moneyFormatter.format(data.TRIGGER_PRICE)}" width="100%" textAlign="right" />
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			
			<mx:DataGridColumn headerText="Type" dataField="TYPE"  />

			<mx:DataGridColumn headerText="Is Negotiated" dataField="IS_NEGOTIATED" >
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{data.IS_NEGOTIATED ? 'YES' : 'NO'}" width="100%" />
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			
		</components:columns>
	</components:EZDataGrid>
	<s:Button label="Refresh" width="75" height="20" id="btnRefresh" top="2" horizontalCenter="119" click="btnRefresh_clickHandler(event)"/>
	<s:Label text="Trader:" horizontalCenter="180" top="7"/>
	<s:DropDownList width="75" change="traders_changeHandler(event)" dataProvider="{tradersList}" height="20" id="traders" horizontalCenter="240" top="2"/>
	
	<!--<mx:Image source="{ImgXls}" buttonMode="true" useHandCursor="true" toolTip="Export" width="20" height="20" id="btnExport" top="2" horizontalCenter="296" click="btnExport_clickHandler(event)"/> -->
	
</s:Group>
