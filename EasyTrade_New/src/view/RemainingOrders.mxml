<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%"
		 height="100%"
		 xmlns:net="flash.net.*"
		 initialize="group1_initializeHandler(event)"
		 xmlns:components="components.*">
	<fx:Script>
		<![CDATA[
			include "../components/SelectionMenu.as"
			include "../eventhandlers/RemainingOrders.as"
			
			import com.as3xls.xls.Cell;
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			import com.as3xls.xls.Type;
			
			import common.Messages;
			
			import components.FormPrintView;
			import components.RemainingFormPrintView;
			
			import controller.ModelManager;
			
			import flash.net.FileReference;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.printing.FlexPrintJob;
			
			import spark.events.IndexChangeEvent;
			import mx.core.FlexGlobals;
			
//			public var fr:FileReference = new FileReference();
			
			[Bindable]
			private var fields:Array=new Array();

			[Bindable]
			[Embed(source="images/xls.png")]
			public var ImgXls:Class;
			
			[Bindable]
			[Embed(source="images/printer-icon.jpg")]
			public var ImgPrint:Class;
			
			[Bindable]
			[Embed(source="images/refresh.jpg")]
			public var refresh:Class;

			protected function btnExport_clickHandler(event:MouseEvent):void
			{
				var sheet:Sheet = new Sheet();				
				var dataProviderCollection:ArrayCollection = adgRemainingOrders.dataProvider as ArrayCollection;  
				var rowCount:int = dataProviderCollection.length;  
				sheet.resize(rowCount + 1,adgRemainingOrders.columnCount);  
				var columns:Array = adgRemainingOrders.columns;  
				var i:int = 0;  
				for each (var field:DataGridColumn in columns){  
					fields.push(field.dataField.toString());  
					sheet.setCell(0,i,field.dataField.toString());  
					i++;  
				}  
				
				for(var r:int=0; r < rowCount; r++)  
				{  
					var record:Object = dataProviderCollection.getItemAt(r);  
					/*insert record starting from row no 2 else  
					headers will be overwritten*/  
					insertRecordInSheet(r+1,sheet,record);  
				}  
				var xls:ExcelFile = new ExcelFile();  
				xls.sheets.addItem(sheet);  
				
				var bytes: ByteArray = xls.saveToByteArray();				
				fr.save(bytes,"Working Orders.xls");				 
			}

			private function fileIOError_Handler(event:IOErrorEvent):void
			{
				Alert.show(ResourceManager.getInstance().getString('marketwatch','fileIOErr'), ResourceManager.getInstance().getString('marketwatch','error'));
			}

			private function fileSaved_Handler(event:Event):void
			{
				Alert.show(ResourceManager.getInstance().getString('marketwatch','fileSuccessMsg'));
			}

			private function insertRecordInSheet(row:int, sheet:Sheet, record:Object):void
			{
				var colCount:int=adgRemainingOrders.columnCount;
				for (var c:int; c < colCount; c++)
				{
					var i:int=0;
					for each (var field:String in fields)
					{
						//Alert.show(record[field]);
						if (record[field] is Date)
						{
							sheet.setCell(row, i, record[field]);
							var cell:Cell=sheet.getCell(row, i);
							cell.format="D-MMM-YY";
							cell.dateMode=1;
								//cell.
						}
						else
							sheet.setCell(row, i, record[field]);
						i++;
					}
				}
			}
			
			
			// The function to print the output.
			public function doPrint():void {
				
				setTimeout(launchAlert2, 3000);
				
				function launchAlert2():void
				{
					trace('eee');
				}
				// Create a FlexPrintJob instance.
				var printJob:FlexPrintJob = new FlexPrintJob();
				
				// Start the print job.
				if (printJob.start()) {
					// Create a FormPrintView control 
					// as a child of the application.
					var thePrintView:RemainingFormPrintView = new RemainingFormPrintView();
					addElement(thePrintView);
					thePrintView.myDataGrid.setStyle('color',0x000000);
					thePrintView.exchangeLabel.text = (txtExchange.text == '') ? '<ALL>' : txtExchange.text;
					thePrintView.marketLabel.text = (txtMarket.text == '') ? '<ALL>':txtMarket.text;
					thePrintView.symbolLabel.text = (txtSymbol.text == '') ? '<ALL>' :txtSymbol.text;
					thePrintView.traderLabel.text = ((traders.labelDisplay as Label).text == '')?'<ALL>':(traders.labelDisplay as Label).text;
					//					thePrintView.myDataGrid.setStyle('fontSize',12);
					// Set the print view properties.
					thePrintView.width=printJob.pageWidth+540;
					thePrintView.height=printJob.pageHeight;
					
					// Set the data provider of the FormPrintView 
					// component's DataGrid to be the data provider of 
					// the displayed DataGrid.
					thePrintView.myDataGrid.dataProvider = 
						ModelManager.getInstance().remainingOrdersModel.remainingOrders;
					//					thePrintView.myDataGrid.columns = dgEventLog.columns;
					thePrintView.myDataGrid.showHeaders = true;
					// Create a single-page image.
					
					// If the print image's DataGrid can hold all the  
					// data provider's rows, add the page to the print job. 
					if(!thePrintView.myDataGrid.validNextPage)
					{
						thePrintView.myDataGrid.setStyle('color',0x000000);
						printJob.addObject(thePrintView);
					}
						// Otherwise, the job requires multiple pages.
					else
					{
						// Create the first page and add it to the print job.
						thePrintView.myDataGrid.setStyle('color',0x000000);
						printJob.addObject(thePrintView);
						thePrintView.pageNumber++;
						// Loop through the following code 
						// until all pages are queued.
						while(true)
						{
							// Move the next page of data to the top of 
							// the PrintDataGrid.
							thePrintView.myDataGrid.nextPage();
							
							// Try creating a last page.
							
							// If the page holds the remaining data, or if 
							// the last page was completely filled by the last  
							// grid data, queue it for printing.
							// Test if there is data for another 
							// PrintDataGrid page.
							if(!thePrintView.myDataGrid.validNextPage) 
							{
								// This is the last page; 
								// queue it and exit the print loop.
								thePrintView.myDataGrid.setStyle('color',0x000000);
								printJob.addObject(thePrintView);
								break;
							}
							else
								// This is not the last page. Queue a middle page. 
							{
								thePrintView.myDataGrid.setStyle('color',0x000000);
								printJob.addObject(thePrintView);
								thePrintView.pageNumber++;
							}
						}
					}
					// All pages are queued; remove the FormPrintView 
					// control to free memory.
					thePrintView.myDataGrid.setStyle('color',0x000000);
					removeElement(thePrintView);
				}
				// Send the job to the printer.
				printJob.send();
			}
			
			///////////////////////////////////////////////////////////
			
			
			
			
			// Created on 16/07/2012 by Anas for the print functionality
			protected function image1_clickHandler(event:MouseEvent):void
			{
				setTimeout(launchAlert2, 3000);
				
				function launchAlert2():void
				{
					trace('eee');
				}
				
				const printJob:FlexPrintJob = new FlexPrintJob(); 
				
				if ( printJob.start() ) 
				{ 
					var printDataGrid:FormPrintView = new FormPrintView(); 
					printDataGrid.myDataGrid.setStyle('wordWrap',true);
					printDataGrid.myDataGrid.setStyle('fontSize',14);
					printDataGrid.myDataGrid.width = printJob.pageWidth+550; 
					printDataGrid.myDataGrid.height = printJob.pageHeight; 
					printDataGrid.myDataGrid.dataProvider = ModelManager.getInstance().remainingOrdersModel.remainingOrders;
					printDataGrid.myDataGrid.columns = adgRemainingOrders.columns;
					printDataGrid.myDataGrid.showHeaders = true;
					addElement(printDataGrid.myDataGrid); 
					while (printDataGrid.myDataGrid.validNextPage) 
					{ 
						printJob.addObject(printDataGrid.myDataGrid); 
					} 
					removeElement(printDataGrid.myDataGrid); 
					printJob.send(); 
				} 
				Alert.show('Printed Successfully','Information');	
			}


			protected function traders_changeHandler(event:IndexChangeEvent):void
			{
				ModelManager.getInstance().updateRemainingOrders();
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:DateFormatter id="dateFormatter"
						  formatString="LL:NN:SS A"/>
		<components:EZCurrencyFormatter id="moneyFormatter"/>
		<components:EZNumberFormatter id="numberFormatter"/>
		<net:FileReference id="fileReference"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<!-- mx:ButtonBar id="toolbar" name="toolbar" y="2" horizontalCenter="0">
	<mx:dataProvider>
	<fx:String>Expand All</fx:String>
	<fx:String>Refresh</fx:String>
	</mx:dataProvider>
	</mx:ButtonBar -->
	<s:BorderContainer width="100%"
					   height="30"
					   horizontalCenter="0"
					   top="0">
		<s:Image y="-1" click="doPrint()" horizontalCenter="-380" visible="true"
				 source="{ImgPrint}" buttonMode="true" useHandCursor="true" />
		<s:Image y="-1" buttonMode="true" click="btnExport_clickHandler(event)" visible="true"
				 horizontalCenter="-415" source="{ImgXls}" useHandCursor="true"/>
		<s:Label text="{resourceManager.getString('marketwatch','exchange')}:"
				 horizontalCenter="{(FlexGlobals.topLevelApplication.parameters.LOCALE == 'ar_SA')?'-240':'-295'}" 
				 direction="{(FlexGlobals.topLevelApplication.parameters.LOCALE == 'ar_SA')?'rtl':'ltr'}"
				 top="7"/>
		<components:EZDropDownTextInput width="49"
										height="20"
										id="txtExchange"
										editable="false"
										click="txtExchange_clickHandler(event)"
										horizontalCenter="{(FlexGlobals.topLevelApplication.parameters.LOCALE == 'ar_SA')?'-295':'-240'}"
										top="2"/>
		<s:Label text="{resourceManager.getString('marketwatch','market')}:"
				 horizontalCenter="{(FlexGlobals.topLevelApplication.parameters.LOCALE == 'ar_SA')?'-144':'-190'}" 
				 direction="{(FlexGlobals.topLevelApplication.parameters.LOCALE == 'ar_SA')?'rtl':'ltr'}"
				 top="7"/>
		<components:EZDropDownTextInput width="49"
										height="20"
										id="txtMarket"
										editable="false"
										click="txtMarket_clickHandler(event)"
										horizontalCenter="{(FlexGlobals.topLevelApplication.parameters.LOCALE == 'ar_SA')?'-190':'-144'}"
										top="2"/>
		<s:Label text="{resourceManager.getString('marketwatch','symbol')}:"
				 horizontalCenter="{(FlexGlobals.topLevelApplication.parameters.LOCALE == 'ar_SA')?'-11':'-91'}" 
				 direction="{(FlexGlobals.topLevelApplication.parameters.LOCALE == 'ar_SA')?'rtl':'ltr'}"
				 top="7"/>
		<s:TextInput width="110"
					 height="20"
					 id="txtSymbol"
					 keyDown="txtSymbol_keyDownHandler(event)"
					 horizontalCenter="{(FlexGlobals.topLevelApplication.parameters.LOCALE == 'ar_SA')?'-75':'-11'}"
					 top="2"/>
	</s:BorderContainer>
	<components:EZDataGrid id="adgRemainingOrders"
						   right="1"
						   left="1"
						   bottom="1"
						   top="30"
						   width="100%"
						   height="100%"
						   click="adgRemainingOrders_itemClickHandler(event)"
						   dataProvider="{modelManager.remainingOrdersModel.remainingOrders}">
		<components:columns>
			<!--mx:AdvancedDataGridColumn headerText="Market" dataField="MARKET" /-->
			<mx:DataGridColumn headerText="{resourceManager.getString('marketwatch','symbol')}"
							   dataField="SYMBOL">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{data.SYMBOL}"
								  width="100%"
								  textAlign="right"
								  color="{(data.SIDE == 'buy') ? 0x0c70a2 : 0xbe3267}"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="{resourceManager.getString('marketwatch','client')}"
							   dataField="CLIENT_CODE">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{data.CLIENT_CODE}"
								  width="100%"
								  textAlign="right"
								  color="{(data.SIDE == 'buy') ? 0x0c70a2 : 0xbe3267}"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="{resourceManager.getString('marketwatch','orderNumber')}"
							   dataField="ORDER_NO">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{outerDocument.numberFormatter.format(data.ORDER_NO)}"
								  width="100%"
								  textAlign="right"
								  color="{(data.SIDE == 'buy') ? 0x0c70a2 : 0xbe3267}"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="{resourceManager.getString('marketwatch','bid/offer')}"
							   dataField="SIDE">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{data.SIDE}"
								  width="100%"
								  textAlign="right"
								  color="{(data.SIDE == 'buy') ? 0x0c70a2 : 0xbe3267}"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="{resourceManager.getString('marketwatch','price')}"
							   dataField="PRICE">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{outerDocument.moneyFormatter.format(data.PRICE)}"
								  color="{(data.SIDE == 'buy') ? 0x0c70a2 : 0xbe3267}"
								  width="100%"
								  textAlign="right"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="{resourceManager.getString('marketwatch','volume')}"
							   dataField="VOLUME">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{outerDocument.numberFormatter.format(data.VOLUME)}"
								  color="{(data.SIDE == 'buy') ? 0x0c70a2 : 0xbe3267}"
								  width="100%"
								  textAlign="right"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="{resourceManager.getString('marketwatch','discVol')}"
							   dataField="DISCLOSED_VOLUME">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{outerDocument.numberFormatter.format(data.DISCLOSED_VOLUME) == '0' ? '' : outerDocument.numberFormatter.format(data.DISCLOSED_VOLUME)}"
								  color="{(data.SIDE == 'buy') ? 0x0c70a2 : 0xbe3267}"
								  width="100%"
								  textAlign="right"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="{resourceManager.getString('marketwatch','time')}"
							   dataField="ENTRY_DATETIME">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{outerDocument.dateFormatter.format(data.ENTRY_DATETIME)}"
								  color="{(data.SIDE == 'buy') ? 0x0c70a2 : 0xbe3267}"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="{resourceManager.getString('marketwatch','triggerPrice')}"
							   dataField="TRIGGER_PRICE">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{outerDocument.moneyFormatter.format(data.TRIGGER_PRICE > 0 ? data.TRIGGER_PRICE : '')}"
								  width="100%"
								  textAlign="right"
								  color="{(data.SIDE == 'buy') ? 0x0c70a2 : 0xbe3267}"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="{resourceManager.getString('marketwatch','type')}"
							   dataField="TYPE">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{data.TYPE}"
								  width="100%"
								  textAlign="right"
								  color="{(data.SIDE == 'buy') ? 0x0c70a2 : 0xbe3267}"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>

			<mx:DataGridColumn headerText="Is Negotiated" visible="false"
							   dataField="IS_NEGOTIATED">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Label text="{data.IS_NEGOTIATED ? 'YES' : 'NO'}"
								  width="100%"
								  color="{(data.SIDE == 'buy') ? 0x0c70a2 : 0xbe3267}"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
		</components:columns>
	</components:EZDataGrid>
	<s:Image  toolTip="Refresh Event Log"
			  source="{refresh}"
			  id="btnRefresh"
			  top="-1" useHandCursor="true" buttonMode="true"
			  horizontalCenter="139"
			  click="btnRefresh_clickHandler(event)"/>
	<s:Label text="{resourceManager.getString('marketwatch','trader')}:"
			 horizontalCenter="{(FlexGlobals.topLevelApplication.parameters.LOCALE == 'ar_SA')?'295':'235'}" 
			 direction="{(FlexGlobals.topLevelApplication.parameters.LOCALE == 'ar_SA')?'rtl':'ltr'}"
			 top="7"/>
	<s:DropDownList width="75"
					change="traders_changeHandler(event)"
					dataProvider="{tradersList}"
					height="20"
					id="traders"
					horizontalCenter="{(FlexGlobals.topLevelApplication.parameters.LOCALE == 'ar_SA')?'235':'295'}"
					top="2"/>
	<!--<mx:Image source="{ImgXls}" buttonMode="true" useHandCursor="true" toolTip="Export" width="20" height="20" id="btnExport" top="2" horizontalCenter="296" click="btnExport_clickHandler(event)"/> -->
</s:Group>
